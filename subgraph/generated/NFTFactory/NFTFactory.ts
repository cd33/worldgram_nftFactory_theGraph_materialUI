// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NFTContractCreated extends ethereum.Event {
  get params(): NFTContractCreated__Params {
    return new NFTContractCreated__Params(this);
  }
}

export class NFTContractCreated__Params {
  _event: NFTContractCreated;

  constructor(event: NFTContractCreated) {
    this._event = event;
  }

  get nftContractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get baseURI(): string {
    return this._event.parameters[3].value.toString();
  }

  get maxSupply(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get publicSalePrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[6].value.toAddress();
  }
}

export class NFTFactory extends ethereum.SmartContract {
  static bind(address: Address): NFTFactory {
    return new NFTFactory("NFTFactory", address);
  }

  createNFT(
    _name: string,
    _symbol: string,
    _baseURI: string,
    _maxSupply: i32,
    _publicSalePrice: BigInt,
    _recipient: Address
  ): Address {
    let result = super.call(
      "createNFT",
      "createNFT(string,string,string,uint16,uint256,address):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromString(_baseURI),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_maxSupply)),
        ethereum.Value.fromUnsignedBigInt(_publicSalePrice),
        ethereum.Value.fromAddress(_recipient)
      ]
    );

    return result[0].toAddress();
  }

  try_createNFT(
    _name: string,
    _symbol: string,
    _baseURI: string,
    _maxSupply: i32,
    _publicSalePrice: BigInt,
    _recipient: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createNFT",
      "createNFT(string,string,string,uint16,uint256,address):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromString(_baseURI),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_maxSupply)),
        ethereum.Value.fromUnsignedBigInt(_publicSalePrice),
        ethereum.Value.fromAddress(_recipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _worldgramBase(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nftImplementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateNFTCall extends ethereum.Call {
  get inputs(): CreateNFTCall__Inputs {
    return new CreateNFTCall__Inputs(this);
  }

  get outputs(): CreateNFTCall__Outputs {
    return new CreateNFTCall__Outputs(this);
  }
}

export class CreateNFTCall__Inputs {
  _call: CreateNFTCall;

  constructor(call: CreateNFTCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _baseURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _maxSupply(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _publicSalePrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _recipient(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class CreateNFTCall__Outputs {
  _call: CreateNFTCall;

  constructor(call: CreateNFTCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetNFTImplementationCall extends ethereum.Call {
  get inputs(): SetNFTImplementationCall__Inputs {
    return new SetNFTImplementationCall__Inputs(this);
  }

  get outputs(): SetNFTImplementationCall__Outputs {
    return new SetNFTImplementationCall__Outputs(this);
  }
}

export class SetNFTImplementationCall__Inputs {
  _call: SetNFTImplementationCall;

  constructor(call: SetNFTImplementationCall) {
    this._call = call;
  }

  get _nftImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNFTImplementationCall__Outputs {
  _call: SetNFTImplementationCall;

  constructor(call: SetNFTImplementationCall) {
    this._call = call;
  }
}

export class SetWorldgramBaseCall extends ethereum.Call {
  get inputs(): SetWorldgramBaseCall__Inputs {
    return new SetWorldgramBaseCall__Inputs(this);
  }

  get outputs(): SetWorldgramBaseCall__Outputs {
    return new SetWorldgramBaseCall__Outputs(this);
  }
}

export class SetWorldgramBaseCall__Inputs {
  _call: SetWorldgramBaseCall;

  constructor(call: SetWorldgramBaseCall) {
    this._call = call;
  }

  get _worldgramBase(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWorldgramBaseCall__Outputs {
  _call: SetWorldgramBaseCall;

  constructor(call: SetWorldgramBaseCall) {
    this._call = call;
  }
}
